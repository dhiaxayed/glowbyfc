"use client"

import { useEffect, useCallback } from "react"
import { PRELOAD_CONFIG } from "@/lib/preload-config"

/**
 * Hook pour pr√©charger les assets en arri√®re-plan sans bloquer l'interface
 * Optimis√© pour chargement ULTRA-RAPIDE de toutes les images et vid√©o
 */
export function useBackgroundAssetLoader() {
  
  // Pr√©chargement sp√©cialis√© pour les vid√©os
  const preloadVideo = useCallback((src: string): Promise<boolean> => {
    return new Promise((resolve) => {
      const video = document.createElement('video')
      video.preload = 'metadata' // Charge les m√©tadonn√©es imm√©diatement
      
      const cleanup = () => {
        video.onloadedmetadata = null
        video.onerror = null
      }

      const timeoutId = setTimeout(() => {
        cleanup()
        resolve(false)
      }, 2000) // Timeout court pour les vid√©os

      video.onloadedmetadata = () => {
        cleanup()
        clearTimeout(timeoutId)
        resolve(true)
      }

      video.onerror = () => {
        cleanup()
        clearTimeout(timeoutId)
        resolve(false)
      }

      video.src = src
    })
  }, [])
  
  // Pr√©chargement intelligent avec priorit√©s ULTRA-AGRESSIVES
  const preloadImage = useCallback((src: string, priority: 'high' | 'medium' | 'low' = 'medium'): Promise<boolean> => {
    return new Promise((resolve) => {
      // V√©rifier si l'image est d√©j√† en cache
      const img = new window.Image()
      
      // Timeouts optimis√©s pour vitesse maximale
      const timeouts = { high: 1000, medium: 2000, low: 3000 } // R√©duits pour plus de rapidit√©
      const timeoutMs = timeouts[priority]
      
      const cleanup = () => {
        img.onload = null
        img.onerror = null
      }

      const timeoutId = setTimeout(() => {
        cleanup()
        resolve(false) // √âchec silencieux
      }, timeoutMs)

      img.onload = () => {
        cleanup()
        clearTimeout(timeoutId)
        resolve(true)
      }

      img.onerror = () => {
        cleanup()
        clearTimeout(timeoutId)
        resolve(false) // √âchec silencieux
      }

      img.src = src
    })
  }, [])

  // Pr√©chargement par vagues avec d√©lais optimaux
  const startBackgroundPreloading = useCallback(async () => {
    try {
      // Phase 1: S√©parer les images des vid√©os dans les assets critiques
      const criticalImages = PRELOAD_CONFIG.critical.filter(src => !src.endsWith('.mp4'))
      const criticalVideos = PRELOAD_CONFIG.critical.filter(src => src.endsWith('.mp4'))
      
      // Pr√©charger les images critiques ET la vid√©o en parall√®le avec les bonnes m√©thodes
      await Promise.allSettled([
        ...criticalImages.map(src => preloadImage(src, 'high')),
        ...criticalVideos.map(src => preloadVideo(src))
      ])

      console.log('üéØ Assets critiques charg√©s (images + vid√©o)')

      // Phase 2: TOUTES les images de la galerie imm√©diatement apr√®s (pas de d√©lai)
      // Chargement agressif par lots plus importants pour vitesse maximale
      const priorityAssets = PRELOAD_CONFIG.galleryPriority
      const batchSize = 6 // Lots plus importants pour chargement ultra-rapide
      
      for (let i = 0; i < priorityAssets.length; i += batchSize) {
        const batch = priorityAssets.slice(i, i + batchSize)
        
        // Pr√©charger le lot sans attendre (parall√©lisme maximal)
        Promise.allSettled(
          batch.map(src => preloadImage(src, 'high')) // Toutes en priorit√© HAUTE
        )
        
        // D√©lai minimal entre les lots (10ms seulement)
        await new Promise(resolve => setTimeout(resolve, 10))
      }

      // Plus de Phase 3 - tout est charg√© en priorit√© haute imm√©diatement
      console.log('üöÄ Pr√©chargement ultra-rapide termin√©: toutes les images et vid√©o charg√©es!')

    } catch (error) {
      // √âchec silencieux - pas d'impact sur l'UX
      console.warn('Background preloading error:', error)
    }
  }, [preloadImage, preloadVideo])

  useEffect(() => {
    // D√©marrer le pr√©chargement IMM√âDIATEMENT apr√®s le rendu
    const timer = setTimeout(() => {
      startBackgroundPreloading()
    }, 0) // D√©lai supprim√© pour activation imm√©diate

    return () => clearTimeout(timer)
  }, [startBackgroundPreloading])

  // Ce hook ne retourne rien - il travaille silencieusement en arri√®re-plan
}


